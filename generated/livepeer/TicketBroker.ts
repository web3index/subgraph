// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class DepositFunded extends ethereum.Event {
  get params(): DepositFunded__Params {
    return new DepositFunded__Params(this);
  }
}

export class DepositFunded__Params {
  _event: DepositFunded;

  constructor(event: DepositFunded) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WinningTicketRedeemed extends ethereum.Event {
  get params(): WinningTicketRedeemed__Params {
    return new WinningTicketRedeemed__Params(this);
  }
}

export class WinningTicketRedeemed__Params {
  _event: WinningTicketRedeemed;

  constructor(event: WinningTicketRedeemed) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get faceValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get winProb(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get senderNonce(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get recipientRand(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get auxData(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }
}

export class WinningTicketTransfer extends ethereum.Event {
  get params(): WinningTicketTransfer__Params {
    return new WinningTicketTransfer__Params(this);
  }
}

export class WinningTicketTransfer__Params {
  _event: WinningTicketTransfer;

  constructor(event: WinningTicketTransfer) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unlock extends ethereum.Event {
  get params(): Unlock__Params {
    return new Unlock__Params(this);
  }
}

export class Unlock__Params {
  _event: Unlock;

  constructor(event: Unlock) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get startRound(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get endRound(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnlockCancelled extends ethereum.Event {
  get params(): UnlockCancelled__Params {
    return new UnlockCancelled__Params(this);
  }
}

export class UnlockCancelled__Params {
  _event: UnlockCancelled;

  constructor(event: UnlockCancelled) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdrawal extends ethereum.Event {
  get params(): Withdrawal__Params {
    return new Withdrawal__Params(this);
  }
}

export class Withdrawal__Params {
  _event: Withdrawal;

  constructor(event: Withdrawal) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deposit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reserve(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ReserveFunded extends ethereum.Event {
  get params(): ReserveFunded__Params {
    return new ReserveFunded__Params(this);
  }
}

export class ReserveFunded__Params {
  _event: ReserveFunded;

  constructor(event: ReserveFunded) {
    this._event = event;
  }

  get reserveHolder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ReserveClaimed extends ethereum.Event {
  get params(): ReserveClaimed__Params {
    return new ReserveClaimed__Params(this);
  }
}

export class ReserveClaimed__Params {
  _event: ReserveClaimed;

  constructor(event: ReserveClaimed) {
    this._event = event;
  }

  get reserveHolder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get claimant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SetController extends ethereum.Event {
  get params(): SetController__Params {
    return new SetController__Params(this);
  }
}

export class SetController__Params {
  _event: SetController;

  constructor(event: SetController) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ParameterUpdate extends ethereum.Event {
  get params(): ParameterUpdate__Params {
    return new ParameterUpdate__Params(this);
  }
}

export class ParameterUpdate__Params {
  _event: ParameterUpdate;

  constructor(event: ParameterUpdate) {
    this._event = event;
  }

  get param(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class TicketBroker__getReserveInfoResultInfoStruct extends ethereum.Tuple {
  get fundsRemaining(): BigInt {
    return this[0].toBigInt();
  }

  get claimedInCurrentRound(): BigInt {
    return this[1].toBigInt();
  }
}

export class TicketBroker__getTicketHashInput_ticketStruct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get sender(): Address {
    return this[1].toAddress();
  }

  get faceValue(): BigInt {
    return this[2].toBigInt();
  }

  get winProb(): BigInt {
    return this[3].toBigInt();
  }

  get senderNonce(): BigInt {
    return this[4].toBigInt();
  }

  get recipientRandHash(): Bytes {
    return this[5].toBytes();
  }

  get auxData(): Bytes {
    return this[6].toBytes();
  }
}

export class TicketBroker__getSenderInfoResultSenderStruct extends ethereum.Tuple {
  get deposit(): BigInt {
    return this[0].toBigInt();
  }

  get withdrawRound(): BigInt {
    return this[1].toBigInt();
  }
}

export class TicketBroker__getSenderInfoResultReserveStruct extends ethereum.Tuple {
  get fundsRemaining(): BigInt {
    return this[0].toBigInt();
  }

  get claimedInCurrentRound(): BigInt {
    return this[1].toBigInt();
  }
}

export class TicketBroker__getSenderInfoResult {
  value0: TicketBroker__getSenderInfoResultSenderStruct;
  value1: TicketBroker__getSenderInfoResultReserveStruct;

  constructor(
    value0: TicketBroker__getSenderInfoResultSenderStruct,
    value1: TicketBroker__getSenderInfoResultReserveStruct,
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getSender(): TicketBroker__getSenderInfoResultSenderStruct {
    return this.value0;
  }

  getReserve(): TicketBroker__getSenderInfoResultReserveStruct {
    return this.value1;
  }
}

export class TicketBroker extends ethereum.SmartContract {
  static bind(address: Address): TicketBroker {
    return new TicketBroker("TicketBroker", address);
  }

  isUnlockInProgress(_sender: Address): boolean {
    let result = super.call(
      "isUnlockInProgress",
      "isUnlockInProgress(address):(bool)",
      [ethereum.Value.fromAddress(_sender)],
    );

    return result[0].toBoolean();
  }

  try_isUnlockInProgress(_sender: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUnlockInProgress",
      "isUnlockInProgress(address):(bool)",
      [ethereum.Value.fromAddress(_sender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unlockPeriod(): BigInt {
    let result = super.call("unlockPeriod", "unlockPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_unlockPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("unlockPeriod", "unlockPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimedReserve(_reserveHolder: Address, _claimant: Address): BigInt {
    let result = super.call(
      "claimedReserve",
      "claimedReserve(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_reserveHolder),
        ethereum.Value.fromAddress(_claimant),
      ],
    );

    return result[0].toBigInt();
  }

  try_claimedReserve(
    _reserveHolder: Address,
    _claimant: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimedReserve",
      "claimedReserve(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_reserveHolder),
        ethereum.Value.fromAddress(_claimant),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  targetContractId(): Bytes {
    let result = super.call(
      "targetContractId",
      "targetContractId():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_targetContractId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "targetContractId",
      "targetContractId():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  usedTickets(param0: Bytes): boolean {
    let result = super.call("usedTickets", "usedTickets(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return result[0].toBoolean();
  }

  try_usedTickets(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("usedTickets", "usedTickets(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getReserveInfo(
    _reserveHolder: Address,
  ): TicketBroker__getReserveInfoResultInfoStruct {
    let result = super.call(
      "getReserveInfo",
      "getReserveInfo(address):((uint256,uint256))",
      [ethereum.Value.fromAddress(_reserveHolder)],
    );

    return changetype<TicketBroker__getReserveInfoResultInfoStruct>(
      result[0].toTuple(),
    );
  }

  try_getReserveInfo(
    _reserveHolder: Address,
  ): ethereum.CallResult<TicketBroker__getReserveInfoResultInfoStruct> {
    let result = super.tryCall(
      "getReserveInfo",
      "getReserveInfo(address):((uint256,uint256))",
      [ethereum.Value.fromAddress(_reserveHolder)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TicketBroker__getReserveInfoResultInfoStruct>(
        value[0].toTuple(),
      ),
    );
  }

  claimableReserve(_reserveHolder: Address, _claimant: Address): BigInt {
    let result = super.call(
      "claimableReserve",
      "claimableReserve(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_reserveHolder),
        ethereum.Value.fromAddress(_claimant),
      ],
    );

    return result[0].toBigInt();
  }

  try_claimableReserve(
    _reserveHolder: Address,
    _claimant: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimableReserve",
      "claimableReserve(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_reserveHolder),
        ethereum.Value.fromAddress(_claimant),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ticketValidityPeriod(): BigInt {
    let result = super.call(
      "ticketValidityPeriod",
      "ticketValidityPeriod():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_ticketValidityPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ticketValidityPeriod",
      "ticketValidityPeriod():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTicketHash(_ticket: TicketBroker__getTicketHashInput_ticketStruct): Bytes {
    let result = super.call(
      "getTicketHash",
      "getTicketHash((address,address,uint256,uint256,uint256,bytes32,bytes)):(bytes32)",
      [ethereum.Value.fromTuple(_ticket)],
    );

    return result[0].toBytes();
  }

  try_getTicketHash(
    _ticket: TicketBroker__getTicketHashInput_ticketStruct,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTicketHash",
      "getTicketHash((address,address,uint256,uint256,uint256,bytes32,bytes)):(bytes32)",
      [ethereum.Value.fromTuple(_ticket)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getSenderInfo(_sender: Address): TicketBroker__getSenderInfoResult {
    let result = super.call(
      "getSenderInfo",
      "getSenderInfo(address):((uint256,uint256),(uint256,uint256))",
      [ethereum.Value.fromAddress(_sender)],
    );

    return changetype<TicketBroker__getSenderInfoResult>(
      new TicketBroker__getSenderInfoResult(
        changetype<TicketBroker__getSenderInfoResultSenderStruct>(
          result[0].toTuple(),
        ),
        changetype<TicketBroker__getSenderInfoResultReserveStruct>(
          result[1].toTuple(),
        ),
      ),
    );
  }

  try_getSenderInfo(
    _sender: Address,
  ): ethereum.CallResult<TicketBroker__getSenderInfoResult> {
    let result = super.tryCall(
      "getSenderInfo",
      "getSenderInfo(address):((uint256,uint256),(uint256,uint256))",
      [ethereum.Value.fromAddress(_sender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TicketBroker__getSenderInfoResult>(
        new TicketBroker__getSenderInfoResult(
          changetype<TicketBroker__getSenderInfoResultSenderStruct>(
            value[0].toTuple(),
          ),
          changetype<TicketBroker__getSenderInfoResultReserveStruct>(
            value[1].toTuple(),
          ),
        ),
      ),
    );
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class SetUnlockPeriodCall extends ethereum.Call {
  get inputs(): SetUnlockPeriodCall__Inputs {
    return new SetUnlockPeriodCall__Inputs(this);
  }

  get outputs(): SetUnlockPeriodCall__Outputs {
    return new SetUnlockPeriodCall__Outputs(this);
  }
}

export class SetUnlockPeriodCall__Inputs {
  _call: SetUnlockPeriodCall;

  constructor(call: SetUnlockPeriodCall) {
    this._call = call;
  }

  get _unlockPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetUnlockPeriodCall__Outputs {
  _call: SetUnlockPeriodCall;

  constructor(call: SetUnlockPeriodCall) {
    this._call = call;
  }
}

export class FundDepositAndReserveCall extends ethereum.Call {
  get inputs(): FundDepositAndReserveCall__Inputs {
    return new FundDepositAndReserveCall__Inputs(this);
  }

  get outputs(): FundDepositAndReserveCall__Outputs {
    return new FundDepositAndReserveCall__Outputs(this);
  }
}

export class FundDepositAndReserveCall__Inputs {
  _call: FundDepositAndReserveCall;

  constructor(call: FundDepositAndReserveCall) {
    this._call = call;
  }

  get _depositAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _reserveAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FundDepositAndReserveCall__Outputs {
  _call: FundDepositAndReserveCall;

  constructor(call: FundDepositAndReserveCall) {
    this._call = call;
  }
}

export class FundDepositCall extends ethereum.Call {
  get inputs(): FundDepositCall__Inputs {
    return new FundDepositCall__Inputs(this);
  }

  get outputs(): FundDepositCall__Outputs {
    return new FundDepositCall__Outputs(this);
  }
}

export class FundDepositCall__Inputs {
  _call: FundDepositCall;

  constructor(call: FundDepositCall) {
    this._call = call;
  }
}

export class FundDepositCall__Outputs {
  _call: FundDepositCall;

  constructor(call: FundDepositCall) {
    this._call = call;
  }
}

export class FundReserveCall extends ethereum.Call {
  get inputs(): FundReserveCall__Inputs {
    return new FundReserveCall__Inputs(this);
  }

  get outputs(): FundReserveCall__Outputs {
    return new FundReserveCall__Outputs(this);
  }
}

export class FundReserveCall__Inputs {
  _call: FundReserveCall;

  constructor(call: FundReserveCall) {
    this._call = call;
  }
}

export class FundReserveCall__Outputs {
  _call: FundReserveCall;

  constructor(call: FundReserveCall) {
    this._call = call;
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this);
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this);
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class CancelUnlockCall extends ethereum.Call {
  get inputs(): CancelUnlockCall__Inputs {
    return new CancelUnlockCall__Inputs(this);
  }

  get outputs(): CancelUnlockCall__Outputs {
    return new CancelUnlockCall__Outputs(this);
  }
}

export class CancelUnlockCall__Inputs {
  _call: CancelUnlockCall;

  constructor(call: CancelUnlockCall) {
    this._call = call;
  }
}

export class CancelUnlockCall__Outputs {
  _call: CancelUnlockCall;

  constructor(call: CancelUnlockCall) {
    this._call = call;
  }
}

export class SetTicketValidityPeriodCall extends ethereum.Call {
  get inputs(): SetTicketValidityPeriodCall__Inputs {
    return new SetTicketValidityPeriodCall__Inputs(this);
  }

  get outputs(): SetTicketValidityPeriodCall__Outputs {
    return new SetTicketValidityPeriodCall__Outputs(this);
  }
}

export class SetTicketValidityPeriodCall__Inputs {
  _call: SetTicketValidityPeriodCall;

  constructor(call: SetTicketValidityPeriodCall) {
    this._call = call;
  }

  get _ticketValidityPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTicketValidityPeriodCall__Outputs {
  _call: SetTicketValidityPeriodCall;

  constructor(call: SetTicketValidityPeriodCall) {
    this._call = call;
  }
}

export class BatchRedeemWinningTicketsCall extends ethereum.Call {
  get inputs(): BatchRedeemWinningTicketsCall__Inputs {
    return new BatchRedeemWinningTicketsCall__Inputs(this);
  }

  get outputs(): BatchRedeemWinningTicketsCall__Outputs {
    return new BatchRedeemWinningTicketsCall__Outputs(this);
  }
}

export class BatchRedeemWinningTicketsCall__Inputs {
  _call: BatchRedeemWinningTicketsCall;

  constructor(call: BatchRedeemWinningTicketsCall) {
    this._call = call;
  }

  get _tickets(): Array<BatchRedeemWinningTicketsCall_ticketsStruct> {
    return this._call.inputValues[0].value.toTupleArray<BatchRedeemWinningTicketsCall_ticketsStruct>();
  }

  get _sigs(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get _recipientRands(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BatchRedeemWinningTicketsCall__Outputs {
  _call: BatchRedeemWinningTicketsCall;

  constructor(call: BatchRedeemWinningTicketsCall) {
    this._call = call;
  }
}

export class BatchRedeemWinningTicketsCall_ticketsStruct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get sender(): Address {
    return this[1].toAddress();
  }

  get faceValue(): BigInt {
    return this[2].toBigInt();
  }

  get winProb(): BigInt {
    return this[3].toBigInt();
  }

  get senderNonce(): BigInt {
    return this[4].toBigInt();
  }

  get recipientRandHash(): Bytes {
    return this[5].toBytes();
  }

  get auxData(): Bytes {
    return this[6].toBytes();
  }
}

export class RedeemWinningTicketCall extends ethereum.Call {
  get inputs(): RedeemWinningTicketCall__Inputs {
    return new RedeemWinningTicketCall__Inputs(this);
  }

  get outputs(): RedeemWinningTicketCall__Outputs {
    return new RedeemWinningTicketCall__Outputs(this);
  }
}

export class RedeemWinningTicketCall__Inputs {
  _call: RedeemWinningTicketCall;

  constructor(call: RedeemWinningTicketCall) {
    this._call = call;
  }

  get _ticket(): RedeemWinningTicketCall_ticketStruct {
    return changetype<RedeemWinningTicketCall_ticketStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get _sig(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _recipientRand(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedeemWinningTicketCall__Outputs {
  _call: RedeemWinningTicketCall;

  constructor(call: RedeemWinningTicketCall) {
    this._call = call;
  }
}

export class RedeemWinningTicketCall_ticketStruct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get sender(): Address {
    return this[1].toAddress();
  }

  get faceValue(): BigInt {
    return this[2].toBigInt();
  }

  get winProb(): BigInt {
    return this[3].toBigInt();
  }

  get senderNonce(): BigInt {
    return this[4].toBigInt();
  }

  get recipientRandHash(): Bytes {
    return this[5].toBytes();
  }

  get auxData(): Bytes {
    return this[6].toBytes();
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
